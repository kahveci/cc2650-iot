/**
 * OPC-UA Server
 * Sinan Kahveci
 * 04/10/2019
 */
const opcua = require('node-opcua');
const os = require('os');

let config;

const sensorTag = {
  luxometer: 0.00,
  temperature: 0.00,
  humidity: 0.00,
  accelerometerX: 0.00,
  accelerometerY: 0.00,
  accelerometerZ: 0.00
};

const run = (c) => {
  config = c;
  console.log('OPCUA Server: Initializing...');

  // Let's create an instance of OPCUAServer
  const opcuaServer = new opcua.OPCUAServer({
    port: config.opcuaServer.port, // the port of the listening socket of the server
    resourcePath: '/UA/MyLittleServer', // this path will be added to the endpoint resource name
    buildInfo: {
      productName: 'MySampleServer1',
      buildNumber: '7658',
      buildDate: new Date(2019, 10, 4)
    }
  });

  function postInitialize() {
    console.log('OPCUA Server: Initialized!');

    function constructAddressSpace(server) {
      const addressSpace = server.engine.addressSpace;
      const namespace = addressSpace.getOwnNamespace();

      // declare a new object
      const device = namespace.addObject({
        organizedBy: addressSpace.rootFolder.objects,
        browseName: 'SensorTag'
      });

      // add some variables
      // add a variable named MyVariable1 to the newly created folder "MyDevice"
      let testVariable = 0;
      // emulate variable1 changing every 500 ms
      setInterval(() => { testVariable += 1; }, 500);
      namespace.addVariable({
        componentOf: device,
        browseName: 'TestVariable',
        dataType: 'Int16',
        value: {
          get() {
            return new opcua.Variant({ dataType: opcua.DataType.Int16, value: testVariable });
          }
        }
      });

      namespace.addVariable({
        componentOf: device,
        nodeId: 's=luxometer', // a string nodeID. If you don't use this, it is sth like "i=1002"
        browseName: 'Luxometer',
        dataType: 'Float',
        value: {
          get() {
            return new opcua.Variant({
              dataType: opcua.DataType.Float,
              value: sensorTag.luxometer
            });
          }
        }
      });

      namespace.addVariable({
        componentOf: device,
        nodeId: 's=temperature',
        browseName: 'Temperature',
        dataType: 'Float',
        value: {
          get() {
            return new opcua.Variant({
              dataType: opcua.DataType.Float,
              value: sensorTag.temperature
            });
          }
        }
      });

      namespace.addVariable({
        componentOf: device,
        nodeId: 's=humidity',
        browseName: 'Humidity',
        dataType: 'Float',
        value: {
          get() {
            return new opcua.Variant({
              dataType: opcua.DataType.Float,
              value: sensorTag.humidity
            });
          }
        }
      });

      namespace.addVariable({
        componentOf: device,
        nodeId: 's=accelerometerX',
        browseName: 'AccelerometerX',
        dataType: 'Float',
        value: {
          get() {
            return new opcua.Variant({
              dataType: opcua.DataType.Float,
              value: sensorTag.accelerometerX
            });
          }
        }
      });

      namespace.addVariable({
        componentOf: device,
        nodeId: 's=accelerometerY',
        browseName: 'AccelerometerY',
        dataType: 'Float',
        value: {
          get() {
            return new opcua.Variant({
              dataType: opcua.DataType.Float,
              value: sensorTag.accelerometerY
            });
          }
        }
      });

      namespace.addVariable({
        componentOf: device,
        nodeId: 's=accelerometerZ',
        browseName: 'AccelerometerZ',
        dataType: 'Float',
        value: {
          get() {
            return new opcua.Variant({
              dataType: opcua.DataType.Float,
              value: sensorTag.accelerometerZ
            });
          }
        }
      });

      // add a variable named MyVariable2 to the newly created folder "MyDevice"
      let variable2 = 10.0;
      namespace.addVariable({
        componentOf: device,
        nodeId: 'ns=1;b=1020FFAA', // some opaque NodeId in namespace 4
        browseName: 'MyVariable2',
        dataType: 'Double',
        value: {
          get() {
            return new opcua.Variant({ dataType: opcua.DataType.Double, value: variable2 });
          },
          set(variant) {
            variable2 = parseFloat(variant.value);
            return opcua.StatusCodes.Good;
          }
        }
      });

      /**
       * returns the percentage of free memory on the running machine
       * @return {double}
       */
      function availableMemory() {
        // var value = process.memoryUsage().heapUsed / 1000000;
        const percentageMemUsed = os.freemem() / os.totalmem() * 100.0;
        return percentageMemUsed;
      }
      namespace.addVariable({
        componentOf: device,
        nodeId: 's=free_memory', // a string nodeID
        browseName: 'FreeMemory',
        dataType: 'Double',
        value: {
          get() {
            return new opcua.Variant({ dataType: opcua.DataType.Double, value: availableMemory() });
          }
        }
      });
    }

    constructAddressSpace(opcuaServer);
    opcuaServer.start(() => {
      const endpointUrl = opcuaServer.endpoints[0].endpointDescriptions()[0].endpointUrl;
      console.log('OPCUA Server: server is now listening... (press CTRL+C to stop)');
      console.log(`OPC UA server endpoint URL: ${endpointUrl}`);
    });
  }

  opcuaServer.initialize(postInitialize);

  /*
  const myUserManager = {
    isValidUser: (userName, password) => {
      if (userName === config.opcuaServer.userName && password === config.opcuaServer.password) {
        console.log('A client has connected to the server!');
        return true;
      }
      return false;
    },
  };

    },
    userManager: myUserManager,
    isAuditing: true,
    allowAnonymous: false,
    // securityPolicies: SecurityPolicy.Basic128Rsa15,

  server.start((err) => {
    console.log('OPCUA - starting server...');
    if (err) {
      console.log('Server failed to start! Exiting...');
      process.exit(-3);
    }
    // console.log("  Server PID          :".yellow, process.pid);
    console.log('EndpointUrl:'.yellow, endpointUrl.cyan);
    console.log('OPCUA Server is ready for connections!');
  });
  */
};

const updateValue = (tag, value) => {
  switch (tag) {
    case 'luxometer':
      sensorTag.luxometer = value;
      break;
    case 'temperature':
      sensorTag.temperature = value;
      break;
    case 'humidity':
      sensorTag.humidity = value;
      break;
    case 'accelerometerX':
      sensorTag.accelerometerX = value;
      break;
    case 'accelerometerY':
      sensorTag.accelerometerY = value;
      break;
    case 'accelerometerZ':
      sensorTag.accelerometerZ = value;
      break;
    default:
      break;
  }
};

module.exports = {
  run,
  updateValue,
};
